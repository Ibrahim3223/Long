name: Daily Long Videos (all channels)

on:
  schedule:
    - cron: "0 12 * * *"  # Once daily at 12:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python (for matrix build)
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Build matrix from channels config
        id: mk
        shell: bash
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          import yaml

          candidates = [Path("channels_long.yml"), Path("channels.yml")]
          for path in candidates:
              if path.exists():
                  cfg_path = path
                  break
          else:
              raise SystemExit("No channels configuration file found (tried channels_long.yml, channels.yml)")

          print(f"Using channels config: {cfg_path}")
          data = yaml.safe_load(cfg_path.read_text(encoding="utf-8")) or {}
          chs = []
          for ch in data.get("channels", []):
              chs.append({
                  "name": ch.get("name"),
                  "env": ch.get("env", ch.get("name")),
                  "mode": ch.get("mode","educational"),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": str(ch.get("seed","0")),
              })
          open("mx.json","w",encoding="utf-8").write(json.dumps({"include": chs}))
          PY
          echo "matrix=$(cat mx.json)" >> "$GITHUB_OUTPUT"

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.make-matrix.outputs.matrix) }}
    environment: ${{ matrix.env }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg
        run: |
          echo "📦 Installing FFmpeg for video/audio processing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq ffmpeg
          echo "✅ FFmpeg version:"
          ffmpeg -version | head -n1

      # ---------- ENV export ----------
      - name: Export channel variables (safe)
        shell: bash
        env:
          MATRIX_NAME:           ${{ matrix.name }}
          DEFAULT_LANG:          ${{ matrix.lang }}
          DEFAULT_MODE:          ${{ matrix.mode }}
          DEFAULT_VISIBILITY:    ${{ matrix.visibility }}
          DEFAULT_SEED:          ${{ matrix.seed }}

          VARS_TOPIC:            ${{ vars.TOPIC }}
          VARS_LANG:             ${{ vars.LANG }}
          VARS_MODE:             ${{ vars.MODE }}
          VARS_VISIBILITY:       ${{ vars.VISIBILITY }}
          VARS_ROTATION_SEED:    ${{ vars.ROTATION_SEED }}
          VARS_SEARCH_TERMS:     ${{ vars.SEARCH_TERMS }}
          VARS_GEMINI_PROMPT:    ${{ vars.GEMINI_PROMPT }}
          VARS_TTS_RATE:         ${{ vars.TTS_RATE }}
          VARS_TTS_VOICE:        ${{ vars.TTS_VOICE }}
          VARS_BGM_URLS:         ${{ vars.BGM_URLS }}
        run: |
          set -euo pipefail
          CHANNEL_NAME="${MATRIX_NAME}"
          LANG_VAL="${VARS_LANG:-$DEFAULT_LANG}"
          MODE_VAL="${VARS_MODE:-$DEFAULT_MODE}"
          VIS_VAL="${VARS_VISIBILITY:-$DEFAULT_VISIBILITY}"
          SEED_VAL="${VARS_ROTATION_SEED:-$DEFAULT_SEED}"

          wenv () {
            local __name="$1"; shift
            local __val="$*"
            local __delim="EOF_${__name}_$$"
            {
              echo "${__name}<<${__delim}"
              printf '%s\n' "${__val}"
              echo "${__delim}"
            } >> "$GITHUB_ENV"
          }

          wenv CHANNEL_NAME        "${CHANNEL_NAME}"
          wenv TOPIC               "${VARS_TOPIC}"
          wenv LANG                "${LANG_VAL}"
          wenv MODE                "${MODE_VAL}"
          wenv VISIBILITY          "${VIS_VAL:-public}"
          wenv ROTATION_SEED       "${SEED_VAL}"
          wenv SEARCH_TERMS        "${VARS_SEARCH_TERMS}"
          wenv GEMINI_PROMPT       "${VARS_GEMINI_PROMPT}"
          wenv TTS_RATE            "${VARS_TTS_RATE:-+5%}"
          wenv TTS_VOICE           "${VARS_TTS_VOICE}"
          wenv BGM_URLS            "${VARS_BGM_URLS}"
          wenv UPLOAD_TO_YT        "1"

      - name: Restore state from cache
        uses: actions/cache/restore@v4
        with:
          path: .state
          key: state-long-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
          restore-keys: |
            state-long-${{ env.CHANNEL_NAME }}-
            state-long-

      - name: Install Python dependencies
        run: |
          echo "📦 Installing Python packages..."
          python -m pip install -U pip setuptools wheel
          pip install -r requirements.txt
          echo "✅ Python dependencies installed"

      # ============================================================
      # CRITICAL: stable-ts for MILISECOND-PERFECT caption sync
      # ============================================================
      - name: Install stable-ts (milisecond-perfect captions)
        run: |
          echo "🎯 Installing stable-ts for phoneme-level caption alignment..."
          pip install stable-ts>=2.14.0
          echo "✅ stable-ts installed - milisecond caption sync enabled!"
          echo "   Caption precision: ~10-20ms (phoneme-level)"

      - name: Build long-form video
        env:
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY:  ${{ secrets.PIXABAY_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # ===== LONG-FORM VIDEO SETTINGS =====
          VIDEO_WIDTH: "1920"
          VIDEO_HEIGHT: "1080"
          ASPECT_RATIO: "16:9"
          TARGET_DURATION: "240"
          TARGET_MIN_SEC: "180"
          TARGET_MAX_SEC: "600"
          MIN_SENTENCES: "20"
          MAX_SENTENCES: "35"
          TARGET_SENTENCES: "25"

          # ===== TTS (Natural Pacing) =====
          TTS_SSML: "0"
          TTS_RATE: "+5%"

          # ===== CAPTIONS (Bottom Positioned) =====
          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER: "1"
          CAPTION_POSITION: "bottom"
          CAPTION_FONT_SIZE: "48"
          CAPTION_MAX_LINES: "2"
          CAPTION_MARGIN_V: "100"
          KARAOKE_INACTIVE: "#FFD700"
          KARAOKE_ACTIVE: "#3EA6FF"
          KARAOKE_OUTLINE: "#000000"
          KARAOKE_OFFSET_MS: "0"
          KARAOKE_SPEED: "1.0"
          KARAOKE_SPEEDUP_PCT: "0.0"
          KARAOKE_RAMP_PCT: "0.0"
          KARAOKE_EARLY_END_MS: "0"
          CAPTION_LEAD_MS: "0"

          # ===== VIDEO EFFECTS (Subtle) =====
          KARAOKE_EFFECTS: "1"
          EFFECT_STYLE: "subtle"
          VIDEO_MOTION: "1"
          MOTION_INTENSITY: "1.08"
          SCENE_MIN_DURATION: "8.0"
          SCENE_MAX_DURATION: "15.0"

          # ===== QUALITY THRESHOLDS =====
          MIN_QUALITY_SCORE: "6.5"
          MIN_VIRAL_SCORE: "6.0"
          MIN_OVERALL_SCORE: "7.0"

          # ===== NOVELTY & COOLDOWN =====
          NOVELTY_ENFORCE: "1"
          NOVELTY_WINDOW: "30"
          NOVELTY_JACCARD_MAX: "0.60"
          NOVELTY_RETRIES: "5"
          ENTITY_COOLDOWN_DAYS: "45"
          SIM_TH_SCRIPT: "0.90"
          SIM_TH_ENTITY: "0.92"
          STATE_DIR: ".state"

          # ===== PEXELS (Reuse Allowed) =====
          SCENE_STRATEGY: "topic_only"
          PEXELS_DEEP_SEARCH: "1"
          PEXELS_STRICT_VERTICAL: "0"
          PEXELS_ALLOW_LANDSCAPE: "1"
          PEXELS_MIN_HEIGHT: "720"
          PEXELS_PER_PAGE: "80"
          PEXELS_ALLOW_REUSE: "1"
          PEXELS_MAX_USES_PER_CLIP: "2"
          PEXELS_MAX_PAGES: "15"
          ALLOW_PIXABAY_FALLBACK: "1"
          STRICT_ENTITY_FILTER: "0"

          # ===== BGM =====
          BGM_ENABLE: "1"
          BGM_DIR: "bgm"
          BGM_FADE: "1.5"
          BGM_GAIN_DB: "-28"
          BGM_DUCK_THRESH: "0.09"
          BGM_DUCK_RATIO: "4"
          BGM_DUCK_ATTACK_MS: "20"
          BGM_DUCK_RELEASE_MS: "300"

          # ===== UPLOAD (Normal Video) =====
          UPLOAD_AS_SHORTS: "0"
          ENABLE_CHAPTERS: "1"
          MIN_CHAPTER_DURATION: "30"
        run: |
          set -euo pipefail

          safe_slug() {
            printf '%s' "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
          }

          CHANNEL_SLUG=$(safe_slug "${CHANNEL_NAME}")
          LOG_FILE="build_${CHANNEL_SLUG:-${CHANNEL_NAME}}.log"

          echo "== ${CHANNEL_NAME} (LONG-FORM) =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "TARGET: 3-10 minutes (20-35 sentences)"
          echo "FORMAT: 16:9 landscape"

          python main.py 2>&1 | tee "${LOG_FILE}"
          status=${PIPESTATUS[0]}
          if [ "${status}" -ne 0 ]; then
            echo "python main.py failed with exit code ${status}" >&2
            exit "${status}"
          fi

          mp4_sample=$(find out -type f -name '*.mp4' -print -quit || true)
          if [ -z "${mp4_sample}" ]; then
            echo "❌ main.py completed but produced no MP4 files under ./out" >&2
            exit 1
          fi

          echo "✅ Video artifacts located:"
          find out -type f -name '*.mp4'

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CHANNEL_NAME }}-long
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload logs & meta
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CHANNEL_NAME }}-logs
          path: |
            build_*.log
            out/**/*.json
            out/*.json
          if-no-files-found: warn
          retention-days: 14

      - name: Save state to cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state
          key: state-long-${{ env.CHANNEL_NAME }}-${{ github.run_id }}
