name: Daily Long Videos (all channels)

on:
  schedule:
    # Every day at 15:00 EST (20:00 UTC during winter, 19:00 UTC during summer DST)
    # Using 20:00 UTC as standard time (EST = UTC-5, so 15:00 EST = 20:00 UTC)
    - cron: "0 20 * * *"
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python (for matrix build)
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Build matrix from channels config
        id: mk
        shell: bash
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          import yaml

          candidates = [Path("channels_long.yml"), Path("channels.yml")]
          for path in candidates:
              if path.exists():
                  cfg_path = path
                  break
          else:
              raise SystemExit("No channels configuration file found (tried channels_long.yml, channels.yml)")

          print(f"Using channels config: {cfg_path}")
          data = yaml.safe_load(cfg_path.read_text(encoding="utf-8")) or {}
          chs = []
          for ch in data.get("channels", []):
              chs.append({
                  "name": ch.get("name"),
                  "env": ch.get("env", ch.get("name")),
                  "mode": ch.get("mode","educational"),
                  "lang": ch.get("lang","en"),
                  "visibility": ch.get("visibility","public"),
                  "seed": str(ch.get("seed","0")),
                  "topic": ch.get("topic", ""),
                  "search_terms": ch.get("search_terms", []),
              })
          open("mx.json","w",encoding="utf-8").write(json.dumps({"include": chs}))
          PY
          echo "matrix=$(cat mx.json)" >> "$GITHUB_OUTPUT"

  build-upload:
    needs: make-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 30  # ✅ REDUCED from 90 to 30 minutes
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.make-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg
        run: |
          echo "📦 Installing FFmpeg for video/audio processing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq ffmpeg
          echo "✅ FFmpeg version:"
          ffmpeg -version | head -n1

      # ---------- Kanal ENV'leri ----------
      - name: Export channel variables (safe)
        shell: bash
        env:
          CHANNEL_NAME:       ${{ matrix.name }}
          CHANNEL_ENV:        ${{ matrix.env }}
          DEFAULT_LANG:       ${{ matrix.lang }}
          DEFAULT_MODE:       ${{ matrix.mode }}
          DEFAULT_VISIBILITY: ${{ matrix.visibility }}
          DEFAULT_SEED:       ${{ matrix.seed }}
          DEFAULT_TOPIC:      ${{ matrix.topic }}
        run: |
          set -euo pipefail
          echo "CHANNEL_NAME=${CHANNEL_NAME}" >> "$GITHUB_ENV"
          echo "ENV=${CHANNEL_ENV}" >> "$GITHUB_ENV"
          echo "LANG=${DEFAULT_LANG}" >> "$GITHUB_ENV"
          echo "MODE=${DEFAULT_MODE}" >> "$GITHUB_ENV"
          echo "VISIBILITY=${DEFAULT_VISIBILITY}" >> "$GITHUB_ENV"
          echo "SEED=${DEFAULT_SEED}" >> "$GITHUB_ENV"
          echo "TOPIC=${DEFAULT_TOPIC}" >> "$GITHUB_ENV"
          
          echo "📋 Channel: ${CHANNEL_NAME} | Mode: ${DEFAULT_MODE} | Lang: ${DEFAULT_LANG}"

      # ---------- Restore state cache ----------
      - name: Restore state cache
        uses: actions/cache/restore@v4
        with:
          path: .state
          key: state-long-${{ matrix.env }}-${{ github.run_id }}
          restore-keys: |
            state-long-${{ matrix.env }}-

      # ---------- Install deps ----------
      - name: Install dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip show google-generativeai
          echo "✅ Dependencies installed"

      # ============================================================
      # ✅ PERFORMANCE FIX: Install stable-ts for caption alignment
      # ============================================================
      - name: Install stable-ts (milisecond-perfect captions)
        run: |
          echo "🎯 Installing stable-ts for phoneme-level caption alignment..."
          pip install stable-ts>=2.14.0
          echo "✅ stable-ts installed - milisecond caption sync enabled!"

      - name: Run video generation
        env:
          # ===== API KEYS =====
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # ===== PERFORMANCE (Faster Rendering) =====
          FAST_MODE: "1"
          FFMPEG_PRESET: "veryfast"
          PARALLEL_SCENES: "1"
          MAX_WORKERS: "4"

          # ===== CAPTIONS (Karaoke OFF for speed) =====
          KARAOKE_CAPTIONS: "1"
          CAPTION_POSITION: "bottom"
          CAPTION_STYLE: "modern"
          CAPTION_FONT_SIZE: "72"
          CAPTION_MAX_WORDS: "6"
          USE_STABLE_TS: "0"

          # ===== VIDEO EFFECTS (Subtle) =====
          KARAOKE_EFFECTS: "0"
          EFFECT_STYLE: "subtle"
          VIDEO_MOTION: "1"
          MOTION_INTENSITY: "1.08"
          SCENE_MIN_DURATION: "8.0"
          SCENE_MAX_DURATION: "15.0"

          # ===== QUALITY THRESHOLDS =====
          MIN_QUALITY_SCORE: "6.5"
          MIN_VIRAL_SCORE: "6.0"
          MIN_OVERALL_SCORE: "7.0"

          # ===== NOVELTY & COOLDOWN =====
          NOVELTY_ENFORCE: "1"
          NOVELTY_WINDOW: "30"
          NOVELTY_JACCARD_MAX: "0.60"
          NOVELTY_RETRIES: "3"  # ✅ REDUCED from 5 to 3
          ENTITY_COOLDOWN_DAYS: "45"
          SIM_TH_SCRIPT: "0.90"
          SIM_TH_ENTITY: "0.92"
          STATE_DIR: ".state"

          # ===== PEXELS (Faster Search) =====
          SCENE_STRATEGY: "topic_only"
          PEXELS_DEEP_SEARCH: "1"
          PEXELS_STRICT_VERTICAL: "0"
          PEXELS_ALLOW_LANDSCAPE: "1"
          PEXELS_MIN_HEIGHT: "720"
          PEXELS_PER_PAGE: "40"  # ✅ REDUCED from 60 to 40 (faster)
          PEXELS_ALLOW_REUSE: "1"
          PEXELS_MAX_USES_PER_CLIP: "3"
          PEXELS_MAX_PAGES: "5"  # ✅ REDUCED from 8 to 5 (faster search)
          ALLOW_PIXABAY_FALLBACK: "1"
          STRICT_ENTITY_FILTER: "0"

          # ===== BGM =====
          BGM_ENABLE: "0"
          BGM_DIR: "bgm"
          BGM_FADE: "1.5"
          BGM_GAIN_DB: "-28"
          BGM_DUCK_THRESH: "0.09"
          BGM_DUCK_RATIO: "4"
          BGM_DUCK_ATTACK_MS: "20"
          BGM_DUCK_RELEASE_MS: "300"

          # ===== UPLOAD (Normal Video) =====
          UPLOAD_AS_SHORTS: "0"
          ENABLE_CHAPTERS: "1"
          MIN_CHAPTER_DURATION: "30"
        run: |
          set -euo pipefail

          safe_slug() {
            printf '%s' "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
          }

          CHANNEL_SLUG=$(safe_slug "${CHANNEL_NAME}")
          LOG_FILE="build_${CHANNEL_SLUG:-${CHANNEL_NAME}}.log"

          echo "== ${CHANNEL_NAME} (LONG-FORM) =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "TARGET: 3-10 minutes (20-35 sentences) | 16:9"

          python main.py 2>&1 | tee "${LOG_FILE}"
          status=${PIPESTATUS[0]}
          if [ "${status}" -ne 0 ]; then
            echo "python main.py failed with exit code ${status}" >&2
            exit "${status}"
          fi

          mp4_sample=$(find out -type f -name '*.mp4' -print -quit || true)
          if [ -z "${mp4_sample}" ]; then
            echo "❌ main.py completed but produced no MP4 files under ./out" >&2
            exit 1
          fi

          echo "✅ Video artifacts located:"
          find out -type f -name '*.mp4'

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env }}-long
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload logs & meta
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env }}-logs
          path: |
            build_*.log
            out/**/*.json
            out/*.json
          if-no-files-found: warn
          retention-days: 14

      - name: Save state to cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state
          key: state-long-${{ matrix.env }}-${{ github.run_id }}
