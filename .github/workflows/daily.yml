name: Daily Long Video (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: write
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # ✅ REDUCED from 90 to 30 minutes
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg
        run: |
          echo "📦 Installing FFmpeg for video/audio processing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq ffmpeg
          echo "✅ FFmpeg version:"
          ffmpeg -version | head -n1

      - name: Resolve channel defaults
        id: cfg
        env:
          INPUT_ENV: ${{ inputs.environment }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          import os
          import subprocess
          import sys
          from pathlib import Path

          input_env = os.environ["INPUT_ENV"].strip()
          if not input_env:
              raise SystemExit("workflow input 'environment' must not be empty")

          candidates = [Path("channels_long.yml"), Path("channels.yml")]
          for path in candidates:
              if path.exists():
                  cfg_path = path
                  break
          else:
              raise SystemExit("No channels configuration file found (tried channels_long.yml, channels.yml)")

          print(f"Using channels config: {cfg_path}")
          
          try:
              import yaml
          except ImportError:
              print("ERROR: PyYAML not installed. Installing now...")
              subprocess.check_call([sys.executable, "-m", "pip", "install", "pyyaml"])
              import yaml
          
          data = yaml.safe_load(cfg_path.read_text(encoding="utf-8")) or {}
          
          ch = None
          for c in data.get("channels", []):
              c_name = c.get("name", "").strip()
              c_env = c.get("env", c_name).strip()
              if c_env == input_env or c_name == input_env:
                  ch = c
                  break
          
          if ch is None:
              raise SystemExit(f"No channel found for environment '{input_env}'")
          
          CHANNEL_NAME = ch.get("name", input_env)
          LANG = ch.get("lang", "en")
          MODE = ch.get("mode", "educational")
          VISIBILITY = ch.get("visibility", "public")
          SEED = str(ch.get("seed", "0"))
          TOPIC = ch.get("topic", "")
          
          env_file = os.getenv("GITHUB_ENV")
          with open(env_file, "a", encoding="utf-8") as f:
              f.write(f"CHANNEL_NAME={CHANNEL_NAME}\n")
              f.write(f"LANG={LANG}\n")
              f.write(f"MODE={MODE}\n")
              f.write(f"VISIBILITY={VISIBILITY}\n")
              f.write(f"SEED={SEED}\n")
              f.write(f"TOPIC={TOPIC}\n")
          
          print(f"📋 Channel: {CHANNEL_NAME} | Mode: {MODE} | Lang: {LANG}")
          PY

      - name: Restore state cache
        uses: actions/cache/restore@v4
        with:
          path: .state
          key: state-long-${{ inputs.environment }}-${{ github.run_id }}
          restore-keys: |
            state-long-${{ inputs.environment }}-

      # ✅ YENİ: Kokoro TTS model cache
      - name: Cache Kokoro TTS Models
        uses: actions/cache@v4
        with:
          path: ~/.cache/kokoro
          key: kokoro-models-${{ runner.os }}-v1
          restore-keys: |
            kokoro-models-${{ runner.os }}-
        
      # ✅ YENİ: Whisper model cache (stable-ts için)
      - name: Cache Whisper Models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: whisper-models-${{ runner.os }}-v1
          restore-keys: |
            whisper-models-${{ runner.os }}-            

      - name: Install dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          echo "✅ Core dependencies installed"
          
          # Show installed versions
          pip show google-generativeai
          pip show onnxruntime
          pip show huggingface-hub
          echo "✅ All dependencies installed"

      - name: Verify Kokoro TTS Setup
        run: |
          echo "🎙️ Verifying Kokoro TTS installation..."
          python3 -c "
          try:
              import onnxruntime as ort
              print(f'✅ ONNXRuntime: {ort.__version__}')
              from huggingface_hub import __version__ as hf_version
              print(f'✅ HuggingFace Hub: {hf_version}')
              print('✅ Kokoro TTS ready (models will download on first use)')
          except ImportError as e:
              print(f'⚠️ Kokoro TTS not available: {e}')
              print('⚠️ Will fall back to Edge TTS')
          " || echo "⚠️ Kokoro verification failed, continuing with Edge TTS..."          

      - name: Install stable-ts (milisecond-perfect captions)
        run: |
          echo "🎯 Installing stable-ts for phoneme-level caption alignment..."
          pip install stable-ts>=2.14.0
          echo "✅ stable-ts installed - milisecond caption sync enabled!"

      - name: Run video generation
        env:
          # ===== API KEYS =====
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # ===== PERFORMANCE (Faster Rendering) =====
          FAST_MODE: "1"
          FFMPEG_PRESET: "veryfast"
          PARALLEL_SCENES: "1"
          MAX_WORKERS: "4"

          # ===== CAPTIONS (Karaoke OFF for speed) =====
          KARAOKE_CAPTIONS: "1"
          CAPTION_POSITION: "bottom"
          CAPTION_STYLE: "modern"
          CAPTION_FONT_SIZE: "72"
          CAPTION_MAX_WORDS: "6"
          USE_STABLE_TS: "0"

          # ===== VIDEO EFFECTS (Subtle) =====
          KARAOKE_EFFECTS: "0"
          EFFECT_STYLE: "subtle"
          VIDEO_MOTION: "1"
          MOTION_INTENSITY: "1.08"
          SCENE_MIN_DURATION: "8.0"
          SCENE_MAX_DURATION: "15.0"

          # ===== QUALITY THRESHOLDS =====
          MIN_QUALITY_SCORE: "6.5"
          MIN_VIRAL_SCORE: "6.0"
          MIN_OVERALL_SCORE: "7.0"

          # ===== NOVELTY & COOLDOWN =====
          NOVELTY_ENFORCE: "1"
          NOVELTY_WINDOW: "30"
          NOVELTY_JACCARD_MAX: "0.60"
          NOVELTY_RETRIES: "3"  # ✅ REDUCED from 5 to 3
          ENTITY_COOLDOWN_DAYS: "45"
          SIM_TH_SCRIPT: "0.90"
          SIM_TH_ENTITY: "0.92"
          STATE_DIR: ".state"

          # ===== PEXELS (Faster Search) =====
          SCENE_STRATEGY: "topic_only"
          PEXELS_DEEP_SEARCH: "1"
          PEXELS_STRICT_VERTICAL: "0"
          PEXELS_ALLOW_LANDSCAPE: "1"
          PEXELS_MIN_HEIGHT: "720"
          PEXELS_PER_PAGE: "40"  # ✅ REDUCED from 60 to 40
          PEXELS_ALLOW_REUSE: "1"
          PEXELS_MAX_USES_PER_CLIP: "3"
          PEXELS_MAX_PAGES: "5"  # ✅ REDUCED from 8 to 5
          ALLOW_PIXABAY_FALLBACK: "1"
          STRICT_ENTITY_FILTER: "0"

          # ===== BGM =====
          BGM_ENABLE: "0"
          BGM_DIR: "bgm"
          BGM_FADE: "1.5"
          BGM_GAIN_DB: "-28"
          BGM_DUCK_THRESH: "0.09"
          BGM_DUCK_RATIO: "4"
          BGM_DUCK_ATTACK_MS: "20"
          BGM_DUCK_RELEASE_MS: "300"

          # ===== UPLOAD (Normal Video) =====
          UPLOAD_AS_SHORTS: "0"
          ENABLE_CHAPTERS: "1"
          MIN_CHAPTER_DURATION: "30"
        run: |
          set -euo pipefail

          safe_slug() {
            printf '%s' "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
          }

          CHANNEL_SLUG=$(safe_slug "${CHANNEL_NAME}")
          LOG_FILE="build_${CHANNEL_SLUG:-${CHANNEL_NAME}}.log"

          echo "== ${CHANNEL_NAME} (LONG-FORM) =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "TARGET: 3-10 minutes (20-35 sentences) | 16:9"

          python main.py 2>&1 | tee "${LOG_FILE}"
          status=${PIPESTATUS[0]}
          if [ "${status}" -ne 0 ]; then
            echo "python main.py failed with exit code ${status}" >&2
            exit "${status}"
          fi

          mp4_sample=$(find out -type f -name '*.mp4' -print -quit || true)
          if [ -z "${mp4_sample}" ]; then
            echo "❌ main.py completed but produced no MP4 files under ./out" >&2
            exit 1
          fi

          echo "✅ Video artifacts located:"
          find out -type f -name '*.mp4'

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-long
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload logs & meta
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-logs
          path: |
            build_*.log
            out/**/*.json
            out/*.json
          if-no-files-found: warn
          retention-days: 14

      - name: Save state to cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state
          key: state-long-${{ inputs.environment }}-${{ github.run_id }}
