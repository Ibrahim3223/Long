name: Daily Long Video (single channel)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (channel) name"
        required: true
        type: string

permissions:
  contents: write
  actions: read
  checks: read
  id-token: none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Setup FFmpeg
        run: |
          echo "📦 Installing FFmpeg for video/audio processing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq ffmpeg
          echo "✅ FFmpeg version:"
          ffmpeg -version | head -n1

      - name: Resolve channel defaults
        id: cfg
        env:
          INPUT_ENV: ${{ inputs.environment }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          import os
          import subprocess
          import sys
          from pathlib import Path

          input_env = os.environ["INPUT_ENV"].strip()
          if not input_env:
              raise SystemExit("workflow input 'environment' must not be empty")

          candidates = [Path("channels_long.yml"), Path("channels.yml")]
          for path in candidates:
              if path.exists():
                  cfg_path = path
                  break
          else:
              raise SystemExit("No channels configuration file found (tried channels_long.yml, channels.yml)")

          if cfg_path.suffix.lower() == ".json":
              data = json.loads(cfg_path.read_text(encoding="utf-8"))
          else:
              try:
                  import yaml  # type: ignore
              except ModuleNotFoundError:
                  subprocess.check_call([sys.executable, "-m", "pip", "install", "pyyaml"])
                  import yaml  # type: ignore

              data = yaml.safe_load(cfg_path.read_text(encoding="utf-8")) or {}

          target = None
          for ch in data.get("channels", []):
              names = {str(ch.get("env", "")).strip(), str(ch.get("name", "")).strip()}
              if input_env in names:
                  target = ch
                  break

          if target is None:
              available = ", ".join(sorted(filter(None, {
                  str(ch.get("env", "")).strip() or str(ch.get("name", "")).strip()
                  for ch in data.get("channels", [])
              })))
              raise SystemExit(f"Channel '{input_env}' not found in {cfg_path}; available entries: {available}")

          print(f"Using channels config: {cfg_path} (matched entry: {target.get('name')!r})")

          lang = str(target.get("lang", ""))
          mode = str(target.get("mode", ""))
          visibility = str(target.get("visibility", ""))
          seed = str(target.get("seed", ""))
          topic = str(target.get("topic", ""))
          search_terms = "\n".join(str(term) for term in target.get("search_terms", []) if term)

          output_path = Path(os.environ["GITHUB_OUTPUT"])
          with output_path.open("a", encoding="utf-8") as fh:
              fh.write(f"lang={lang}\n")
              fh.write(f"mode={mode}\n")
              fh.write(f"visibility={visibility}\n")
              fh.write(f"seed={seed}\n")
              fh.write(f"config_path={cfg_path.as_posix()}\n")

              topic_delim = f"EOF_TOPIC_{os.getpid()}"
              fh.write(f"topic<<{topic_delim}\n{topic}\n{topic_delim}\n")

              terms_delim = f"EOF_TERMS_{os.getpid()}"
              fh.write(f"search_terms<<{terms_delim}\n{search_terms}\n{terms_delim}\n")
          PY

      # ---------- Kanal ENV'leri ----------
      - name: Export channel variables (safe)
        shell: bash
        env:
          INPUT_ENV:            ${{ inputs.environment }}

          DEFAULT_LANG:         ${{ steps.cfg.outputs.lang }}
          DEFAULT_MODE:         ${{ steps.cfg.outputs.mode }}
          DEFAULT_VISIBILITY:   ${{ steps.cfg.outputs.visibility }}
          DEFAULT_SEED:         ${{ steps.cfg.outputs.seed }}
          DEFAULT_TOPIC:        ${{ steps.cfg.outputs.topic }}
          DEFAULT_SEARCH_TERMS: ${{ steps.cfg.outputs.search_terms }}
          CHANNELS_CONFIG_PATH: ${{ steps.cfg.outputs.config_path }}

          VARS_TOPIC:           ${{ vars.TOPIC }}
          VARS_LANG:            ${{ vars.LANG }}
          VARS_MODE:            ${{ vars.MODE }}
          VARS_VISIBILITY:      ${{ vars.VISIBILITY }}
          VARS_ROTATION_SEED:   ${{ vars.ROTATION_SEED }}
          VARS_SEARCH_TERMS:    ${{ vars.SEARCH_TERMS }}
          VARS_GEMINI_PROMPT:   ${{ vars.GEMINI_PROMPT }}
          VARS_TTS_RATE:        ${{ vars.TTS_RATE }}
          VARS_TTS_VOICE:       ${{ vars.TTS_VOICE }}
          VARS_BGM_URLS:        ${{ vars.BGM_URLS }}
        run: |
          set -euo pipefail

          CHANNEL_NAME="$INPUT_ENV"
          LANG_VAL="${VARS_LANG:-${DEFAULT_LANG:-}}"
          MODE_VAL="${VARS_MODE:-${DEFAULT_MODE:-}}"
          VIS_VAL="${VARS_VISIBILITY:-${DEFAULT_VISIBILITY:-public}}"
          SEED_VAL="${VARS_ROTATION_SEED:-${DEFAULT_SEED:-0}}"

          # TTS voice boşsa hızlı ve stabil default atıyoruz (Edge-TTS default)
          if [ -z "${VARS_TTS_VOICE:-}" ]; then
            DEF_VOICE="en-US-GuyNeural"
          else
            DEF_VOICE="${VARS_TTS_VOICE}"
          fi

          wenv () {
            local __name="$1"; shift
            local __val="$*"
            local __delim="EOF_${__name}_$$"
            {
              echo "${__name}<<${__delim}"
              printf '%s\n' "${__val}"
              echo "${__delim}"
            } >> "$GITHUB_ENV"
          }

          TOPIC_VAL="${VARS_TOPIC:-${DEFAULT_TOPIC:-}}"
          SEARCH_VAL="${VARS_SEARCH_TERMS:-${DEFAULT_SEARCH_TERMS:-}}"

          wenv CHANNEL_NAME        "${CHANNEL_NAME}"
          wenv TOPIC               "${TOPIC_VAL}"
          wenv LANG                "${LANG_VAL}"
          wenv MODE                "${MODE_VAL}"
          wenv VISIBILITY          "${VIS_VAL:-public}"
          wenv ROTATION_SEED       "${SEED_VAL}"
          wenv SEARCH_TERMS        "${SEARCH_VAL}"
          wenv GEMINI_PROMPT       "${VARS_GEMINI_PROMPT}"
          wenv TTS_RATE            "${VARS_TTS_RATE:-+5%}"
          wenv TTS_VOICE           "${DEF_VOICE}"
          wenv BGM_URLS            "${VARS_BGM_URLS}"
          wenv UPLOAD_TO_YT        "1"
          if [ -n "${CHANNELS_CONFIG_PATH:-}" ]; then
            wenv CHANNELS_CONFIG_PATH "${CHANNELS_CONFIG_PATH}"
          fi

      - name: Restore state from cache
        uses: actions/cache/restore@v4
        with:
          path: .state
          key: state-long-${{ inputs.environment }}-${{ github.run_id }}
          restore-keys: |
            state-long-${{ inputs.environment }}-
            state-long-

      # 🔥 Model ağırlıklarını cache'le — SentenceTransformer, torch, HF vb.
      - name: Cache model weights (HF/torch/ST)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/torch
            ~/.cache/huggingface
            ~/.cache/sentence_transformers
          key: models-${{ inputs.environment }}-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            models-${{ inputs.environment }}-${{ runner.os }}-
            models-

      - name: Install Python dependencies
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_NO_WARN_SCRIPT_LOCATION: "1"
        run: |
          echo "📦 Installing Python packages..."
          python -m pip install -U pip setuptools wheel
          pip install -r requirements.txt
          echo "✅ Python dependencies installed"

      # ============================================================
      # stable-ts (phoneme-level align) — Edge-TTS marker varsa çoğunlukla gerekmez,
      # ama yüklü dursun (fallback olduğunda kırılmasın).
      # ============================================================
      - name: Install stable-ts (milisecond-perfect captions)
        run: |
          echo "🎯 Installing stable-ts for phoneme-level caption alignment..."
          pip install "stable-ts>=2.14.0"
          echo "✅ stable-ts installed"

      - name: Build long-form video
        env:
          GEMINI_API_KEY:   ${{ secrets.GEMINI_API_KEY }}
          PEXELS_API_KEY:   ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY:  ${{ secrets.PIXABAY_API_KEY }}
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}

          # ===== LONG-FORM VIDEO SETTINGS =====
          VIDEO_WIDTH: "1920"
          VIDEO_HEIGHT: "1080"
          ASPECT_RATIO: "16:9"
          TARGET_DURATION: "240"
          TARGET_MIN_SEC: "180"
          TARGET_MAX_SEC: "600"
          MIN_SENTENCES: "20"
          MAX_SENTENCES: "35"
          TARGET_SENTENCES: "25"

          # ===== TTS (Natural Pacing) =====
          TTS_SSML: "0"
          # TTS_RATE export adımından geliyor, burada override etmiyoruz

          # ===== CAPTIONS (Bottom Positioned) =====
          REQUIRE_CAPTIONS: "1"
          KARAOKE_CAPTIONS: "1"
          CAPTIONS_UPPER: "1"
          CAPTION_POSITION: "bottom"
          CAPTION_FONT_SIZE: "48"
          CAPTION_MAX_LINES: "2"
          CAPTION_MARGIN_V: "100"
          KARAOKE_INACTIVE: "#FFD700"
          KARAOKE_ACTIVE: "#3EA6FF"
          KARAOKE_OUTLINE: "#000000"
          KARAOKE_OFFSET_MS: "0"
          KARAOKE_SPEED: "1.0"
          KARAOKE_SPEEDUP_PCT: "0.0"
          KARAOKE_RAMP_PCT: "0.0"
          KARAOKE_EARLY_END_MS: "0"
          CAPTION_LEAD_MS: "0"

          # ===== VIDEO EFFECTS (Subtle) =====
          KARAOKE_EFFECTS: "1"
          EFFECT_STYLE: "subtle"
          VIDEO_MOTION: "1"
          MOTION_INTENSITY: "1.08"
          SCENE_MIN_DURATION: "8.0"
          SCENE_MAX_DURATION: "15.0"

          # ===== QUALITY THRESHOLDS =====
          MIN_QUALITY_SCORE: "6.5"
          MIN_VIRAL_SCORE: "6.0"
          MIN_OVERALL_SCORE: "7.0"

          # ===== NOVELTY & COOLDOWN =====
          NOVELTY_ENFORCE: "1"
          NOVELTY_WINDOW: "30"
          NOVELTY_JACCARD_MAX: "0.60"
          NOVELTY_RETRIES: "5"
          ENTITY_COOLDOWN_DAYS: "45"
          SIM_TH_SCRIPT: "0.90"
          SIM_TH_ENTITY: "0.92"
          STATE_DIR: ".state"

          # ===== PEXELS (Faster Search) =====
          SCENE_STRATEGY: "topic_only"
          PEXELS_DEEP_SEARCH: "1"
          PEXELS_STRICT_VERTICAL: "0"
          PEXELS_ALLOW_LANDSCAPE: "1"
          PEXELS_MIN_HEIGHT: "720"
          PEXELS_PER_PAGE: "60"          # 80 -> 60 (daha hızlı)
          PEXELS_ALLOW_REUSE: "1"
          PEXELS_MAX_USES_PER_CLIP: "3"  # 2 -> 3 (daha az indirme)
          PEXELS_MAX_PAGES: "8"          # 15 -> 8 (arama derinliği kısaldı)
          ALLOW_PIXABAY_FALLBACK: "1"
          STRICT_ENTITY_FILTER: "0"

          # ===== BGM =====
          # Geçici olarak kapalı (BGMManager alias fix gelene kadar)
          BGM_ENABLE: "0"
          BGM_DIR: "bgm"
          BGM_FADE: "1.5"
          BGM_GAIN_DB: "-28"
          BGM_DUCK_THRESH: "0.09"
          BGM_DUCK_RATIO: "4"
          BGM_DUCK_ATTACK_MS: "20"
          BGM_DUCK_RELEASE_MS: "300"

          # ===== UPLOAD (Normal Video) =====
          UPLOAD_AS_SHORTS: "0"
          ENABLE_CHAPTERS: "1"
          MIN_CHAPTER_DURATION: "30"
        run: |
          set -euo pipefail

          safe_slug() {
            printf '%s' "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
          }

          CHANNEL_SLUG=$(safe_slug "${CHANNEL_NAME}")
          LOG_FILE="build_${CHANNEL_SLUG:-${CHANNEL_NAME}}.log"

          echo "== ${CHANNEL_NAME} (LONG-FORM) =="
          echo "TOPIC=${TOPIC}"
          echo "LANG=${LANG}"
          echo "TARGET: 3-10 minutes (20-35 sentences) | 16:9"

          python main.py 2>&1 | tee "${LOG_FILE}"
          status=${PIPESTATUS[0]}
          if [ "${status}" -ne 0 ]; then
            echo "python main.py failed with exit code ${status}" >&2
            exit "${status}"
          fi

          mp4_sample=$(find out -type f -name '*.mp4' -print -quit || true)
          if [ -z "${mp4_sample}" ]; then
            echo "❌ main.py completed but produced no MP4 files under ./out" >&2
            exit 1
          fi

          echo "✅ Video artifacts located:"
          find out -type f -name '*.mp4'

      - name: Upload artifact (mp4)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-long
          path: |
            out/**/*.mp4
            out/*.mp4
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload logs & meta
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-logs
          path: |
            build_*.log
            out/**/*.json
            out/*.json
          if-no-files-found: warn
          retention-days: 14

      - name: Save state to cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state
          key: state-long-${{ inputs.environment }}-${{ github.run_id }}
